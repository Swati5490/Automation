import boto3
from datetime import datetime, timedelta

ses_client = boto3.client('ses','ap-south-1')
iam_client = boto3.client('iam')
SENDER_EMAIL = 'cloudsupport@nuvama.com'

def send_email1(recipient_email, access_key_id, access_key_age, iamusername ,username,account_name,notifyEmailParts):
    subject = 'Intimation Mail || IAM User Access Key Rotation Notification'
    body_text = (
        f"<p>Hi {username},</p>"
        f"<p>your IAM User Access Key is approaching its expiration. As part of our security policy, the key rotation process has been initiated</p> "
        f"<p>Your access key will be rotated on the 82nd day.</p>"
        f"<table border={"1"} style={"border-collapse: collapse;"}>"
        f"<tr><td><h4>Account Name </h4></td><td> {account_name}</td></tr>"
        f"<tr><td><h4>IAM User </h4></td><td> {iamusername}</td></tr>"
        f"<tr><td><h4>Access Key ID </h4></td><td> {access_key_id}</td></tr>"
        f"<tr><td><h4>Access Key Age </h4></td><td> {access_key_age}</td></tr>"
        f"</table>"
        f"<p>After Key rotation, We will notify you !!</p>"
        f"<p>If you have any concerns or require assistance, feel free to reach out</p>"
        f"<p>Thank You, For your support! </p>"
    )
    sendemail(subject,body_text,recipient_email,notifyEmailParts)
    
def sendemail(subject,body_text,recipient_email,notifyEmailParts) :  
    #print("email notify-----",notifyEmailParts)
    response=""
    if notifyEmailParts == ['Null']:
        #print("email notify--222---",notifyEmailParts)
        cc_email=['Swati.Singh@nuvama.com','Priyanka.Raut@nuvama.com']
    else:
        #print("email notify--333333---",notifyEmailParts)
        cc_email= notifyEmailParts + ['Swati.Singh@nuvama.com','Priyanka.Raut@nuvama.com']
    charset = "UTF-8"
    response = ses_client.send_email(
        Source=SENDER_EMAIL,
        Destination={
            'ToAddresses': [recipient_email],
            'CcAddresses': cc_email
        },
        Message={
            'Body': {
                'Html': {
                    'Charset': charset,
                    'Data': body_text,
                },
                'Text': {
                    'Charset': charset,
                    'Data': body_text,
                },
            },
            'Subject': {
                'Charset': charset,
                'Data': subject,
            },
        }
    )
    print("Mail Sent to ",recipient_email, "Message : ",body_text)
    return response

def send_email21(recipient_email, new_access_key_id, secret_access_key, iamusername, old_access_key_id,username,account_name):
    #print("inside rotation email")
    subject = 'IAM User Access Key Rotation Successful'
    body_text = (
        f"<p>Hi {username},</p>"
        f"<p>This is to inform you that the access key for your IAM User has been successfully rotated.</p>"
        f"<table border={"1"} style={"border-collapse: collapse;"}>"
        f"<tr><td><h4>Account Name </h4></td><td> {account_name}</td></tr>"
        f"<tr><td><h4>IAM User </h4></td><td> {iamusername}</td></tr>"
        f"<tr><td><h4>New Access Key ID </h4></td><td> {new_access_key_id}</td></tr>"
        f"<tr><td><h4>New Secret Access Key </h4></td><td> {secret_access_key}</td></tr>"
        f"<tr><td><h4>Old access key </h4></td><td> {old_access_key_id}</td></tr>"
        f"</table>"
        f"<p>Please update your credentials in your application within the next 7 Days and thoroughly test the new key.Your prompt action will help ensure a seamless transition.</p>"
        f"<p>Thank You, For your support</p>"
    )
    charset = "UTF-8"
    response = ses_client.send_email(
        Source=SENDER_EMAIL,
        Destination={
            'ToAddresses': [recipient_email]
        },
        Message={
            'Body': {
                'Html': {
                    'Charset': charset,
                    'Data': body_text,
                },
                'Text': {
                    'Charset': charset,
                    'Data': body_text,
                },
            },
            'Subject': {
                'Charset': charset,
                'Data': subject,
            },
        }
    )
    #print("Mail Sent to ",recipient_email, "Message : ",body_text)
    return response

def send_email22(recipient_email, new_access_key_id,iamusername, old_access_key_id,username,account_name,cto, notifyEmailParts):
    subject = 'IAM User Access Key Rotation Successful'
    #print("typre",type(cto),"---",type(notifyEmailParts))
    if notifyEmailParts == ['Null']:
        notifyEmailParts=[cto]
    else :
        notifyEmailParts=notifyEmailParts+[cto]
    body_text = (
        f"<p>Hi {username}, Cloud Support,</p>"
        f"<p>This is to inform you that the access key for your IAM User has been successfully rotated as part of our security protocol.</p>"
        f"<table border={"1"} style={"border-collapse: collapse;"}>"
        f"<tr><td><h4>Account Name </h4></td><td> {account_name}</td></tr>"
        f"<tr><td><h4>IAM User </h4></td><td> {iamusername}</td></tr>"
        f"<tr><td><h4>New Access Key ID </h4></td><td> {new_access_key_id}</td></tr>"
        f"<tr><td><h4>Old Access Key ID </h4></td><td> {old_access_key_id}</td></tr>"  
        f"</table>"
        f"<p>Kindly Update new key in your application. We will deactive old key after 7 Days</p>"
        f"<p>Thank You, For your support</p>"
    )
    #print("Mail Sent to ",recipient_email, "Message : ",body_text)
    sendemail(subject,body_text,recipient_email,notifyEmailParts)

def send_email23(recipient_email,username, inactive_keys,user,account_name,notifyEmailParts,key_age):
    subject = 'Old IAM User Access Key have been deactivated'
    body_text = (
        f"<p>Hi {user},</p>"
        f"<p>This is to inform you that the old access key for the following IAM User has been deactivated</p>"
        f"<table border={"1"} style={"border-collapse: collapse;"}>"
        f"<tr><td><h4>Account Name </h4></td><td> {account_name}</td></tr>"
        f"<tr><td><h4>IAM User </h4></td><td> {username}</td></tr>"
        f"<tr><td><h4>Old Access Key </h4></td><td> {inactive_keys}</td></tr>"
        f"<tr><td><h4>Age Of Key </h4></td><td> {key_age}</td></tr>"
        f"<tr><td><h4>Status Of Old Key </h4></td><td> Inactive </td></tr>"
        f"</table>"
        f"<p>The old access key will be deleted on the 90th day. If you have not yet configured the new access key in your application, please take immediate action.</p>"
        f"<p>Kindly check your emails, as the new access key was shared 7 days ago for the specified IAM user.</p>"
        f"<p>For further assistance, please connect with the Cloud Support Team</p>"   
        f"<p>Thank You, For your support</p>"
    )
    sendemail(subject,body_text,recipient_email,notifyEmailParts)
            
def send_email3(recipient_email, access_key_id, username,user,account_name,notifyEmailParts):
    subject = 'Old IAM User Access Key has been deleted'
    body_text = (
        f"<p>Hi {user},</p><p>This is to inform you that the old access key for the following IAM User has been permanently deleted.</p>"
        f"<table border={"1"} style={"border-collapse: collapse;"}>"
        f"<tr><td><h4>Account Name </h4></td><td> {account_name}</td></tr>"
        f"<tr><td><h4>IAM User </h4></td><td> {username}</td></tr>"
        f"<tr><td><h4>Deleted Old Access Key ID </h4></td><td> {access_key_id}</td></tr>"
        f"</table>"
        f"<p>The IAM key rotation process has been successfully completed.</p>"
        f"<p>For any further assistance, please feel free to reach out to the Cloud Support Team.</p>"
        f"<p>Thank You, For your support</p>"
    )
    sendemail(subject,body_text,recipient_email,notifyEmailParts)

def send_email4(recipient_email, username, key_id, user, account_name, notifyEmailParts, last_used_date,key_age):
    subject = 'Reminder Mail To Rotate New Key in your application'
    body_text = (
        f"<p>Hi {user},</p><p>This is to remind you that the access key for the following IAM User was rotated a few days ago</p>"
        f"<table border={"1"} style={"border-collapse: collapse;"}>"
        f"<tr><td><h4>Account Name </h4></td><td> {account_name}</td></tr>"
        f"<tr><td><h4>IAM User </h4></td><td> {username}</td></tr>"
        f"<tr><td><h4>New Access Key ID </h4></td><td> {key_id}</td></tr>"
        f"<tr><td><h4>Age of New Key </h4></td><td> {key_age}</td></tr>"
        f"<tr><td><h4>Status Of New Key/Last Used </h4></td><td> {last_used_date}</td></tr>"
        f"</table>"
        f"<p>If you haven't performed sanity checks on your new IAM access key yet, please do so as soon as possible. Your old key will be deactivate on 89th day. These checks ensure uninterrupted access to your resources. For Any assistance, Kindly connect to Cloud Support Team</p>"
        f"<p>Thank You, For your support</p>"
    )
    sendemail(subject,body_text,recipient_email,notifyEmailParts)
   
def assume_role(account_id, role_name):
    sts_client = boto3.client('sts')
    assumed_role = sts_client.assume_role(
        RoleArn=f'arn:aws:iam::{account_id}:role/{role_name}',
        RoleSessionName='LambdaSession'
    )
    return assumed_role['Credentials']

def fetch_iam_user_data(credentials, account_id, account_name):
    iam_client = boto3.client(
        'iam',
        aws_access_key_id=credentials['AccessKeyId'],
        aws_secret_access_key=credentials['SecretAccessKey'],
        aws_session_token=credentials['SessionToken']
    )
    users = iam_client.list_users()
    user_data = []
    username = ""
    parts=""
    errormsg=""
    errormsg1=""
    for user in users['Users']:
        try :
            username = user['UserName']
            access_keys = iam_client.list_access_keys(UserName=username)['AccessKeyMetadata']
            tags = iam_client.list_user_tags(UserName=username)
            email_addresses = []
            user = []
            keyaction=[]
            last_used_date = []
            new_access_key_id=[]
            notifyEmail=[]
            cto=[]

            for tag in tags['Tags']:
                if tag['Key'] == 'User':
                    user.append((username, tag['Value']))
                elif tag['Key'] == 'Email':
                    email_addresses.append((username, tag['Value']))
                elif tag['Key'] == 'KeyAction':
                    keyaction.append((username, tag['Value']))
                elif tag['Key'] == 'NotificationEmail':
                    notifyEmail.append((username, tag['Value']))
                elif tag['Key'] == 'CTO':
                    cto.append((username, tag['Value']))
        
            for username, email in email_addresses:
                email_addresses = email
            for username, userTag in user:
                user = userTag
            for username, key_action in keyaction:
                keyaction = key_action
            for username, notify_email in notifyEmail:
                notifyEmail = notify_email
            for username, cto_email in cto:
                cto = cto_email
            #print("--------notify--------",notifyEmail)
            if notifyEmail != []:
                notifyEmailParts = notifyEmail.split(" ")
            
            #print("access keysss----",access_keys)
            if keyaction == 'Immediate' and access_keys != []:   
                for key in access_keys:
                    key_id = key['AccessKeyId']
                    create_date = key['CreateDate']
                    key_status  = key['Status']
                    key_age = (datetime.now(create_date.tzinfo) - create_date).days
                    last_used_response = iam_client.get_access_key_last_used(AccessKeyId=key_id)
                    last_used_date = last_used_response['AccessKeyLastUsed'].get('LastUsedDate', 'Never Used')
                    # Send Notification to user/admin at 80 Days
                    if key_age == 80 and key_status == 'Active':
                        send_email1(email_addresses,key_id,key_age,username,user,account_name,notifyEmailParts)
                    elif key_age == 82 and key_status == 'Active':
                        new_key = iam_client.create_access_key(UserName=username)['AccessKey']
                        new_access_key_id = new_key['AccessKeyId']
                        new_secret_access_key = new_key['SecretAccessKey']
                        send_email21(email_addresses, new_access_key_id, new_secret_access_key, username, key_id,user,account_name)
                        send_email22(email_addresses, new_access_key_id, username, key_id, user, account_name, cto, notifyEmailParts)
                    
                    elif key_age == 2 or key_age == 5 :
                        send_email4(email_addresses, username, key_id, user, account_name, notifyEmailParts,last_used_date,key_age)
                    
                    elif key_age == 89 and key_status == 'Active':
                        iam_client.update_access_key(UserName=username, AccessKeyId=key_id, Status='Inactive')
                        send_email23(email_addresses, username, key_id, user, account_name, notifyEmailParts,key_age)
                        
                    elif key_age == 90 and key_status == 'Inactive':
                        access_keys_old = key_id
                        iam_client.delete_access_key(UserName=username, AccessKeyId=key_id)
                        send_email3(email_addresses , access_keys_old, username,user,account_name,notifyEmailParts)
                      
        except Exception as e:
            errormsg=f"<p>Exception Throw : {e} for IAM User {username} Account Name {account_name}</p>"
            errormsg1=errormsg1+errormsg
            continue       
    return errormsg1
            #'statusCode': 200,
        #'body': 'Key rotation, email notification, and inactive key check completed successfully'
    
def fetchAccountName(account_id):
    if account_id == '606443521319':
        return "PWARND"
    elif account_id == '148160715702':
        return "PWMRND"
    elif account_id == '057490504518':
        return "EGIACorpRND"
    elif account_id == '732821778924':
        return "EGIA Trading Platforms"
    elif account_id == '625750620533':
        return "PWA"
    elif account_id == '874698610942':
        return "PWA Call Center"
    elif account_id == '211142723734':
        return "PWM"
    elif account_id == '790988048460':
        return "Capital Services"
    elif account_id == '335374845256':
        return "Asset Services"
    elif account_id == '344352937661':
        return "Investment Management"
    elif account_id == '371938574238':
        return "WM Corporate"
    elif account_id == '787935213539':
        return "EGIA Corporate"
    elif account_id == '081363297245':
        return "FIA"
    elif account_id == '687841828365':
        return "Institutional Equities"
    elif account_id == '943663807706':
        return "External Asset Management"
    elif account_id == '562272010475':
        return "Network Account"
    elif account_id == '686428535135':
        return "LogArchive"
    elif account_id == '523677342687':
        return "SharedService"
    elif account_id == '246841685644':
        return "PCG"
    elif account_id == '594963042177':
        return "ManagementAccount"
    elif account_id == '251531950660':
        return "AuditAccount"
    elif account_id == '908027402715':
        return "Digital Data"
    
    
def lambda_handler(event, context):
    account_ids = ['908027402715','251531950660','246841685644','606443521319', '523677342687','057490504518','148160715702','732821778924','625750620533','874698610942','211142723734','790988048460','335374845256','344352937661','371938574238','787935213539','081363297245','687841828365','943663807706','686428535135','562272010475']
    role_name = 'LambdaIAMAccessRole'
    all_user_data = ""
    user_data=""
    result=""
    result1=""
    for account_id in account_ids:
        credentials = assume_role(account_id, role_name)
        account_name = fetchAccountName(account_id)
        #print(account_name,"----------",account_id)
        result=fetch_iam_user_data(credentials,account_id,account_name)
        result1=result+result1
        #print("result---",result1)
    if result1 != "":
        sendemail('Alert: Error during IAM User Access Key Rotation Process',result1,'Swati.Singh@nuvama.com',['Null'])
    return {
        'statusCode': 200,
        'body': '-----Success----------'
    }
